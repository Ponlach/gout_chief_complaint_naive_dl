# -*- coding: utf-8 -*-
"""gout_ml

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dV4YrPwpBLA8c-HsW7d-54wH7hVKR1Bq
"""

import pandas as pd
import numpy as np

df1 = pd.read_csv('GOUT-CC-2020-CORPUS-SYNTHETIC.csv')
df2 = pd.read_csv('GOUT-CC-2019-CORPUS-SYNTHETIC.csv')
df = pd.concat([df1,df2])
df

df = df.drop(df[df.Predict == '-'].index)
df['Consensus'].value_counts()

df['label']=df['Consensus'].mask(df['Consensus']=="-",df['Predict'])
#df['text'] = df['Chief Complaint'].str.split()
df['text'] = df['Chief Complaint'].str.lower()
data = df[['label', 'text']]
data['label'].value_counts()

gout_key =  [x.lower() for x in ['ARM','HIP','SHOULDER','WRIST','ANKLE','KNEE','TOE','FOOT','FEET','LEG','ELBOW','FINGER','THUMB',
             'LLE','LUE','RUE','RLE','LE','UE',
             'PMH','PMHX','HX','PMX',
             'gout','podagra','tophaceous','tophi','tophus',
             'acute flare','acute inflammatory process','allopurinol','arthritis','attack','big toe','cellulitis',
'codeine','colchicine','chronic arthritis','corticosteroids', 'diclofenac','edema','elevated levels of uric acid',
'flare','flare up','flare‐up','g6pd    ','gonagra','high uric acid level','hydrocodone','hyperuricemia','ibuprofen'
,'indomethacin','inflammation of joint','joint pain','kidney stone','king\'s disease','metacarpal',
'metacarpophalangeal joint','metatarsal phalangeal','metatarsal‐phalangeal','naprosyn','naproxen','nsaid',
'oxycodone','recu    rrent attacks','red joint','redness and swelling','swelling','swollen joint','synovial biopsy',
'synovial fluid analysis','tender joint','urate lower     drugs','urate‐lowering therapy','urate nephropathy',
'uric acid','uric acid crystals','uric crystals','voltarol','zyloric'
]]

import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import confusion_matrix
def showConfusionMatrix(y_true,y_pred):
    regex1data  = {'y_Actual': y_true,'y_Predicted': y_pred}
    df = pd.DataFrame(regex1data, columns=['y_Actual','y_Predicted'])
    confusion_matrix = pd.crosstab(df['y_Actual'], df['y_Predicted'], rownames=['Actual'], colnames=['Predicted'],)
    ax = plt.axes()
    ax = sns.heatmap(confusion_matrix, annot=True,fmt="d",ax=ax)
    plt.show()

from sklearn.feature_extraction.text import CountVectorizer

documents = list(data.text)
categories = list(data.label)

count_feature_extractor = CountVectorizer()
dic = count_feature_extractor.fit(gout_key)
X = dic.transform(documents)

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
y = le.fit_transform(categories)

from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import precision_recall_fscore_support as prfs
from sklearn.linear_model import LogisticRegression
import collections

collections.Counter(y)

from sklearn.model_selection import KFold
kf = KFold(n_splits=5)
naive = []
logreg = []
for train, test in kf.split(X):
  X_train = X[train]
  X_test = X[test]
  y_train = y[train]
  y_train=np.where(y_train==1,2,y_train)
  y_test = y[test]
  mnb_clf = MultinomialNB(force_alpha=True)
  mnb_clf = mnb_clf.fit(X_train, y_train)

  y_pred = mnb_clf.predict(X_test)

  naive.append([y_test,y_pred])
  showConfusionMatrix(y_test,y_pred)
  p_micro, r_micro, f1_micro, _ = prfs(y_pred=y_pred, y_true=y_test, average="micro")
  print("Micro Evaluation: Precision: %.4f; Recall: %.4f; F1-Score: %.4f" % (p_micro, r_micro, f1_micro))
  p_macro, r_macro, f1_macro, _ = prfs(y_pred=y_pred, y_true=y_test, average="macro")
  print("Macro Evaluation: Precision: %.4f; Recall: %.4f; F1-Score: %.4f" % (p_macro, r_macro, f1_macro))

  logreg_clf = LogisticRegression(solver="lbfgs", random_state=42, max_iter=1000)
  logreg_clf = logreg_clf.fit(X_train, y_train)
  y_pred = logreg_clf.predict(X_test)
  showConfusionMatrix(y_test,y_pred)
  p_micro, r_micro, f1_micro, _ = prfs(y_pred=y_pred, y_true=y_test, average="micro")
  print("Micro Evaluation: Precision: %.4f; Recall: %.4f; F1-Score: %.4f" % (p_micro, r_micro, f1_micro))

  p_macro, r_macro, f1_macro, _ = prfs(y_pred=y_pred, y_true=y_test, average="macro")
  print("Macro Evaluation: Precision: %.4f; Recall: %.4f; F1-Score: %.4f" % (p_macro, r_macro, f1_macro))
  print("train_%s test_%s" % (len(y[train]), len(y[test])))
  print("====================================================================================")
